// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the Math class */
    function void init() {
        
        var int i, two;

        let twoToThe = Array.new(16);
        let i = 0;
        let two = 1;

        while (i < 16) {
            let twoToThe[i] = two;
            let two = two + two;
            let i = i + 1;
        }
        return;
    }

    /** Returns true if the ith bit of x is 1, false otherwise */
    function boolean bit(int x, int i) {
        
        if ((twoToThe[i] & x) = 0) {
            return false;
        }
        else {
            return true;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {

        if (x < 0) {
            return -x;
        }

        else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {

        var int sum, shiftedX, i, ax, ay;

        let ax = Math.abs(x);
        let ay = Math.abs(y);

        let sum = 0;
        let shiftedX = ax;
        let i = 0;

        while (i < 16) {

            if (Math.bit(ay, i)) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;

            if (shiftedX < 0) {
                let i = 16;
            }
        }

        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
            let sum = -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {

        var int q, ax;

        let ax = Math.abs(x);

        if ((y > ax) | (y < 0)) {return 0;}

        let q = Math.divide(ax, y + y);

        if (ax - (2*q*y) < y) {
            if (x < 0) {
                return -(q+q);
            }
            else {
                return q + q;
            }
        }

        else {
            if (x < 0) {
                return -(q + q + 1);
            }
            else {
                return 2*q + 1;
            }
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {

        var int y, i, a;

        let y = 0;
        let i = 7;

        while (~(i < 0)) {

            let a = Math.multiply(y + twoToThe[i], y + twoToThe[i]);
            if (~(a > x) & (a > 0)) {let y = y + twoToThe[i];}
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        
        if (a > b) {
            return a;
        }

        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {

        if (a > b) {
            return b;
        }

        else {
            return a;
        }
    }
}
